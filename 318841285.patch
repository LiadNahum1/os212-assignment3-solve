diff --git a/Makefile b/Makefile
index 43e152f..db840af 100644
--- a/Makefile
+++ b/Makefile
@@ -30,6 +30,11 @@ OBJS = \
   $K/plic.o \
   $K/virtio_disk.o
 
+ifndef SELECTION
+ SELECTION=SCFIFO
+endif
+
+
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
 #TOOLPREFIX = 
@@ -56,13 +61,16 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb
+#assign3
+CFLAGS = -D SELECTION=$(SELECTION) -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb  -Werror -fno-omit-frame-pointer
+CFLAGS += -Wall -Werror -O -fno-omit-frame-pointer -ggdb
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 
+
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
 CFLAGS += -fno-pie -no-pie
@@ -133,6 +141,7 @@ UPROGS=\
 	$U/_wc\
 	$U/_zombie\
 	$U/_lazytests\
+	$U/_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index b7802e0..1ab473e 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -155,6 +155,8 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+//assign3
+void            check_page_fault(void);
 
 // uart.c
 void            uartinit(void);
@@ -192,5 +194,7 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+//assign3
+void            update_aging_algorithms(void);
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
diff --git a/kernel/file.c b/kernel/file.c
index a705538..06dbdd7 100644
--- a/kernel/file.c
+++ b/kernel/file.c
@@ -215,14 +215,16 @@ kfilewrite(struct file *f, uint64 addr, int n)
 {
   int r, ret = 0;
 
-  if(f->writable == 0)
+  if(f->writable == 0){
     return -1;
+  }
 
   if(f->type == FD_PIPE){
     ret = pipewrite(f->pipe, addr, n);
   } else if(f->type == FD_DEVICE){
-    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write){
       return -1;
+    }
     ret = devsw[f->major].write(1, addr, n);
   } else if(f->type == FD_INODE){
     // write a few blocks at a time to avoid exceeding
@@ -251,7 +253,10 @@ kfilewrite(struct file *f, uint64 addr, int n)
       }
       i += r;
     }
+
     ret = (i == n ? n : -1);
+
+
   } else {
     panic("filewrite");
   }
diff --git a/kernel/fs.c b/kernel/fs.c
index a4e4801..9a5be4e 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -290,7 +290,6 @@ ilock(struct inode *ip)
 {
   struct buf *bp;
   struct dinode *dip;
-
   if(ip == 0 || ip->ref < 1)
     panic("ilock");
 
@@ -340,7 +339,6 @@ iput(struct inode *ip)
     // ip->ref == 1 means no other process can have ip locked,
     // so this acquiresleep() won't block (or deadlock).
     acquiresleep(&ip->lock);
-
     release(&itable.lock);
 
     itrunc(ip);
@@ -489,10 +487,12 @@ writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
   uint tot, m;
   struct buf *bp;
 
-  if(off > ip->size || off + n < off)
+  if(off > ip->size || off + n < off){
     return -1;
-  if(off + n > MAXFILE*BSIZE)
+  }
+  if(off + n > MAXFILE*BSIZE){
     return -1;
+  }
 
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
@@ -769,7 +769,6 @@ removeSwapFile(struct proc* p)
 int
 createSwapFile(struct proc* p)
 {
-
   char path[DIGITS];
   memmove(path,"/.swap", 6);
   itoa(p->pid, path+ 6);
@@ -781,15 +780,13 @@ createSwapFile(struct proc* p)
   p->swapFile = filealloc();
   if (p->swapFile == 0)
     panic("no slot for files on /store");
-
   p->swapFile->ip = in;
   p->swapFile->type = FD_INODE;
   p->swapFile->off = 0;
   p->swapFile->readable = O_WRONLY;
   p->swapFile->writable = O_RDWR;
-    end_op();
-
-    return 0;
+  end_op();
+  return 0;
 }
 
 //return as sys_write (-1 when error)
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..3d5d7b2 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -48,8 +48,10 @@ kfree(void *pa)
 {
   struct run *r;
 
+  if((char*)pa < end)
+    panic("kfree here");
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
-    panic("kfree");
+    panic("kfree hello");
 
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..083ea96 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -141,6 +141,19 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  //assign 3
+  //initialize new field
+  for(int i=0;i<32;i++){
+    p->paging_meta_data[i].offset = -1;
+    p->paging_meta_data[i].aging = 0;
+    p->paging_meta_data[i].in_memory = 0;
+  }
+  p->queue.front = 0;
+  p->queue.last = -1;
+  
+  for(int i=0; i<32; i++){
+    p->queue.pages[i] = -1;
+  }
   return p;
 }
 
@@ -149,7 +162,8 @@ found:
 // p->lock must be held.
 static void
 freeproc(struct proc *p)
-{
+{ 
+
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
@@ -164,6 +178,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  
+
 }
 
 // Create a user page table for a given process,
@@ -225,6 +241,8 @@ uchar initcode[] = {
 void
 userinit(void)
 {
+  printf("SELECTION IS %d \n", SELECTION);
+  
   struct proc *p;
 
   p = allocproc();
@@ -249,10 +267,8 @@ userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-  uint sz;
+int origin_growproc(int n){
+   uint sz;
   struct proc *p = myproc();
 
   sz = p->sz;
@@ -267,6 +283,40 @@ growproc(int n)
   return 0;
 }
 
+int
+growproc(int n)
+{
+  //assign3
+  uint sz;
+  struct proc *p = myproc();
+
+  sz = p->sz;
+  if(n < 0){
+    sz = uvmdealloc(p->pagetable, sz, sz + n);
+  }
+  p->sz = p->sz + n;
+  return 0;
+}
+
+void 
+copy_swap_file(struct proc* child){
+  struct proc * pParent = myproc();
+  int offset; 
+  for(uint64 i = 0; i < pParent->sz; i += PGSIZE){
+    offset = pParent->paging_meta_data[i/PGSIZE].offset;
+    if(offset != -1){
+      char* buffer;
+      if((buffer = kalloc()) == 0)
+      panic("not enough space to kalloc");
+      if(readFromSwapFile(pParent, buffer, offset, PGSIZE) == -1)
+          panic("read swap file failed\n");
+      if(writeToSwapFile(child, buffer, offset, PGSIZE ) == -1)
+          panic("write swap file failed\n");
+      kfree(buffer);
+    }
+  }
+}
+
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
 int
@@ -275,12 +325,11 @@ fork(void)
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
-
   // Allocate process.
   if((np = allocproc()) == 0){
     return -1;
   }
-
+  
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -307,6 +356,33 @@ fork(void)
 
   release(&np->lock);
 
+  //assign3
+  #if SELECTION != NONE
+      if(createSwapFile(np) != 0){
+        panic("create swap file failed");
+      }     
+
+    //copy parent's swap file 
+    if(p->pid > 1){ 
+        copy_swap_file(np);
+      }
+  #endif
+ 
+  //can check if SELECTION != NONE but it is not necessary we can initialize those fields anyway 
+  //copy parent's paging_meta_data 
+  for(int i=0; i<32; i++){
+    np->paging_meta_data[i].offset = myproc()->paging_meta_data[i].offset;
+    np->paging_meta_data[i].aging = myproc()->paging_meta_data[i].aging;
+    np->paging_meta_data[i].in_memory = myproc()->paging_meta_data[i].in_memory;
+  }
+    //init queues
+  np->queue.front = myproc()->queue.front;
+  np->queue.last = myproc()->queue.last;
+  np->queue.page_counter = myproc()->queue.page_counter;
+  for(int i=0; i<32; i++){
+    np->queue.pages[i] = myproc()->queue.pages[i];
+  }
+
   acquire(&wait_lock);
   np->parent = p;
   release(&wait_lock);
@@ -352,7 +428,11 @@ exit(int status)
       p->ofile[fd] = 0;
     }
   }
-
+  if(p->pid > 1)
+  {
+    //assign3
+    removeSwapFile(p);
+  }
   begin_op();
   iput(p->cwd);
   end_op();
@@ -454,7 +534,7 @@ scheduler(void)
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
+        update_aging_algorithms();
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
diff --git a/kernel/proc.h b/kernel/proc.h
index c007999..d5f3198 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -82,6 +82,19 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+//assign 3
+struct meta_data{
+  int offset; //offset in swapFile. -1 not in swapFile 
+  uint aging;  //for each algorithm will be treated differently 
+  int in_memory;
+};
+struct age_queue{
+  int pages[32];
+  int front; //first element in queue
+  int last;  //last element in queue
+  int page_counter; //number of elements in queue
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -107,4 +120,7 @@ struct proc {
   char name[16];               // Process name (debugging)
 
   struct file *swapFile;
+  struct meta_data paging_meta_data[32];
+  struct age_queue queue;
 };
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..1de82d2 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,8 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_A (1L << 6) //access
+#define PTE_PG (1L << 10) // Paged out to secondary storage
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
@@ -352,3 +354,17 @@ sfence_vma()
 
 typedef uint64 pte_t;
 typedef uint64 *pagetable_t; // 512 PTEs
+
+//assign 3
+#define MAX_PSYC_PAGES 16
+#define MAX_TOTAL_PAGES 32
+
+//replacement algorithms
+#define NFUA 1
+#define LAPA 2
+#define SCFIFO 3
+#define NONE 4 //The paging framework is disabled – behavior should stay as in the original xv6 
+
+#define LAPA_AGE 0xFFFFFFFF
+#define SHIFT_ON (1L << 31)
+#define USER_MEMORY_INDEX 3
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..064d73b 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,11 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } 
+  else if(r_scause() == 13 || r_scause() == 15){
+    check_page_fault();
+  }
+  else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/vm.c b/kernel/vm.c
index b47f111..3237e59 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,15 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
-
+//added
+#include "spinlock.h"
+#include "proc.h"
+
+int get_num_of_pages_in_memory(void);
+void remove_from_queue_not_in_memory(int page_num_removed);
+void lazy_memory_allocation(uint64 faulting_address);
+int find_file_to_remove();
+uint init_aging(int fifo_init_pages);
 /*
  * the kernel's page table.
  */
@@ -80,8 +88,8 @@ kvminithart()
 pte_t *
 walk(pagetable_t pagetable, uint64 va, int alloc)
 {
-  if(va >= MAXVA)
-    panic("walk");
+  //if(va >= MAXVA)
+    //panic("walk");
 
   for(int level = 2; level > 0; level--) {
     pte_t *pte = &pagetable[PX(level, va)];
@@ -159,9 +167,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // Remove npages of mappings starting from va. va must be
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
-void
-uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
-{
+void origin_uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free){
   uint64 a;
   pte_t *pte;
 
@@ -180,8 +186,49 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       kfree((void*)pa);
     }
     *pte = 0;
+    }
+}
+//uvmunmap is called as in origion xv6
+void
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+{
+  uint64 a;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    panic("uvmunmap: not aligned");
+
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){    
+     //assign3
+    if((pte = walk(pagetable, a, 0)) != 0){
+      if((*pte & PTE_V) != 0){
+        if(PTE_FLAGS(*pte) == PTE_V)
+          panic("uvmunmap: not a leaf");
+        if(do_free){
+          uint64 pa = PTE2PA(*pte);
+          kfree((void*)pa);
+          #if SELECTION != NONE
+            if(a/PGSIZE < 32){
+              myproc()->paging_meta_data[a/PGSIZE].in_memory = 0;
+              myproc()->paging_meta_data[a/PGSIZE].offset = -1;
+              remove_from_queue_not_in_memory(a/PGSIZE);
+            }
+          #endif
+        }
+      }
+      else{
+        #if SELECTION != NONE
+            if(a/PGSIZE < 32){
+                myproc()->paging_meta_data[a/PGSIZE].offset = -1;
+            }
+        #endif
+
+      }
+       *pte = 0; //even if not in memory we want to earase itf flag so won't even be PAGED_OUT
   }
 }
+}
+
 
 // create an empty user page table.
 // returns 0 if out of memory.
@@ -212,11 +259,33 @@ uvminit(pagetable_t pagetable, uchar *src, uint sz)
   memmove(mem, src, sz);
 }
 
+//find min empty offset to write into swap file
+uint
+find_min_empty_offset(){
+  struct proc * process = myproc();
+  uint min_empty_offset= 0;
+  int already_in_use = 0;
+  for(int i=0; i<process->sz; i = i+PGSIZE){
+    already_in_use = 0;
+      for(int j=0; j<32; j++){
+        if(process->paging_meta_data[j].offset == i){
+          already_in_use =1; 
+          break;
+        }
+      }
+    if(already_in_use == 0){
+      min_empty_offset = i;
+      break; 
+    }
+  }
+  return min_empty_offset;
+
+}
+
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
-{
+origin_uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz){
   char *mem;
   uint64 a;
 
@@ -225,17 +294,69 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
 
   oldsz = PGROUNDUP(oldsz);
   for(a = oldsz; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
-      return 0;
+
+      mem = kalloc();
+      if(mem == 0){
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      memset(mem, 0, PGSIZE);
+      if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+        kfree(mem);
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+    
+  }
+  return newsz;
+}
+
+//uvmalloc is called in a lazy manner 
+uint64
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  #if SELECTION == NONE  //no paging - can alloc more than 32 pages 
+    return origin_uvmalloc(pagetable, oldsz, newsz);
+  #endif 
+  char *mem;
+  uint64 a;
+  pte_t* pte;
+  if(newsz < oldsz)
+    return oldsz;
+  oldsz = PGROUNDUP(oldsz);
+  for(a = oldsz; a < newsz; a += PGSIZE){
+     if(a/PGSIZE > MAX_TOTAL_PAGES){
+      panic("more than 32 pages");
+      return 0; 
     }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
-      kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
-      return 0;
+     if(get_num_of_pages_in_memory() >= MAX_PSYC_PAGES){
+       if(mappages(pagetable, a, PGSIZE, 0, PTE_W|PTE_R|PTE_X|PTE_U|PTE_PG) < 0) {
+         uvmdealloc(pagetable, newsz, oldsz);
+         return 0;
+      }
+      //update flags to be not PTE_V
+      pte = walk(pagetable, a, 0);
+      *pte = *pte & (~PTE_V);
+      int offset = find_min_empty_offset();
+      myproc()->paging_meta_data[a/PGSIZE].offset = offset;
+      }
+    
+    else{
+      mem = kalloc();
+      if(mem == 0){
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      memset(mem, 0, PGSIZE);
+      if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+        kfree(mem);
+        uvmdealloc(pagetable, a, oldsz);
+        return 0;
+      }
+      myproc()->paging_meta_data[a/PGSIZE].in_memory = 1;
+      myproc()->paging_meta_data[a/PGSIZE].aging = init_aging(a/PGSIZE);
     }
+    
   }
   return newsz;
 }
@@ -271,8 +392,8 @@ freewalk(pagetable_t pagetable)
       uint64 child = PTE2PA(pte);
       freewalk((pagetable_t)child);
       pagetable[i] = 0;
-    } else if(pte & PTE_V){
-      panic("freewalk: leaf");
+    } else if(pte & PTE_V){ 
+      panic("freewalk: leaf\n");
     }
   }
   kfree((void*)pagetable);
@@ -294,9 +415,7 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // physical memory.
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
-int
-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
-{
+int origin_uvmcopy(pagetable_t old, pagetable_t new, uint64 sz){
   pte_t *pte;
   uint64 pa, i;
   uint flags;
@@ -317,6 +436,36 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       goto err;
     }
   }
+
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+int
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){    
+    //assign3
+    if((pte = walk(old, i, 0)) !=0 && (*pte & PTE_V) != 0){
+      pa = PTE2PA(*pte);
+      flags = PTE_FLAGS(*pte);
+      if((mem = kalloc()) == 0)
+        goto err;
+      memmove(mem, (char*)pa, PGSIZE);
+      if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+        kfree(mem);
+        goto err;
+      }
+    }
+    
+  }
   return 0;
 
  err:
@@ -348,8 +497,10 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
+   
+    if(pa0 == 0){
       return -1;
+    }
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
@@ -429,3 +580,248 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void swap_page_into_file(int offset){
+    struct proc * p = myproc();
+    int remove_file_indx = find_file_to_remove();
+    uint64 removed_page_VA = remove_file_indx*PGSIZE;
+    pte_t *out_page_entry =  walk(p->pagetable, removed_page_VA, 0); 
+    //write the information from this file to memory
+    uint64 physical_addr = PTE2PA(*out_page_entry);
+    printf("Chosen page %d. Data in chosen page is %s\n", remove_file_indx, physical_addr);
+    if(writeToSwapFile(p,(char*)physical_addr,offset,PGSIZE) ==  -1)
+      panic("write to file failed");
+    //free the RAM memmory of the swapped page
+    kfree((void*)physical_addr);
+    *out_page_entry = (*out_page_entry & (~PTE_V)) | PTE_PG;
+    p->paging_meta_data[remove_file_indx].offset = offset;
+    p->paging_meta_data[remove_file_indx].in_memory = 0;
+      
+}
+
+int get_num_of_pages_in_memory(){
+  int counter = 0;
+  for(int i=0; i<32; i++){
+    if(myproc()->paging_meta_data[i].in_memory){
+      printf("pid %d , %d in memory, aging %d\n", myproc()->pid, i, myproc()->paging_meta_data[i].aging);
+      counter = counter+1;
+    }
+  }
+  return counter; 
+}
+
+void page_in(uint64 faulting_address, pte_t * missing_pte_entry){
+  //get the page number of the missing in ram page
+  int current_page_index = PGROUNDDOWN(faulting_address)/PGSIZE;
+
+  //get its offset in the saved file
+  uint offset = myproc()->paging_meta_data[current_page_index].offset;
+  if(offset == -1){
+    panic("offset is -1");
+  }
+  //allocate a buffer for the information from the file
+  char* read_buffer;
+  if((read_buffer = kalloc()) == 0)
+    panic("not enough space to kalloc");
+  if (readFromSwapFile(myproc(),read_buffer ,offset,PGSIZE) == -1)
+    panic("read from file failed");
+
+  if(get_num_of_pages_in_memory() >= MAX_PSYC_PAGES){
+    swap_page_into_file(offset); //maybe adding it in the end of the swap
+    *missing_pte_entry = PA2PTE((uint64)read_buffer) | ((PTE_FLAGS(*missing_pte_entry)& ~PTE_PG) | PTE_V);
+  }  
+  else{
+      *missing_pte_entry = PA2PTE((uint64)read_buffer) | PTE_V; 
+  }
+  //update offsets and aging of the files
+  myproc()->paging_meta_data[current_page_index].aging = init_aging(current_page_index);
+  myproc()->paging_meta_data[current_page_index].offset = -1;
+  myproc()->paging_meta_data[current_page_index].in_memory = 1;
+  sfence_vma(); //refresh TLB
+}
+
+void lazy_memory_allocation(uint64 faulting_address){
+  uvmalloc(myproc()->pagetable,PGROUNDDOWN(faulting_address), PGROUNDDOWN(faulting_address) + PGSIZE);     
+}
+
+void check_page_fault(){
+  uint64 faulting_address = r_stval(); 
+  pte_t * pte_entry = walk(myproc()->pagetable, PGROUNDDOWN(faulting_address), 0); //maybe doesn't have to pagedown 
+  if(pte_entry !=0 &&(!(*pte_entry & PTE_V)  && *pte_entry & PTE_PG)){
+    printf("Page Fault - Page was out of memory\n");
+    page_in(faulting_address, pte_entry);
+  }
+  else if (faulting_address <= myproc()->sz){
+    //printf("Page Fault - Lazy allocation\n");
+    lazy_memory_allocation(faulting_address);
+  }
+  else
+    exit(-1);
+}
+
+
+int minimum_counter_NFUA(){
+  struct proc * p = myproc();
+  uint min_age = -1;
+  int index_page = -1;
+  for (int i = USER_MEMORY_INDEX; i <32; i++){ 
+    if (p->paging_meta_data[i].in_memory ){
+        if (min_age == -1 || (uint)p->paging_meta_data[i].aging < min_age){
+          min_age = p->paging_meta_data[i].aging;
+          index_page = i;
+        }
+      }
+  }
+  if(min_age == -1)
+    panic("page replacment algorithem failed");
+  return index_page;
+}
+
+int count_one_bits(uint age){
+  int count = 0;
+  while(age) {
+      count += age & 1;
+      age >>= 1;
+  }
+  return count;
+}
+
+int minimum_ones(){
+  struct proc * p = myproc();
+  int min_ones = -1;
+  int min_age = -1;
+  int index_page = -1;
+  uint age;
+  for (int i = USER_MEMORY_INDEX; i <32; i++){
+    if (p->paging_meta_data[i].in_memory ){
+      age =  p->paging_meta_data[i].aging;
+      int count_ones =  count_one_bits(age);
+      if (min_ones == -1 || count_ones < min_ones || (count_ones == min_ones && age < min_age)){
+        min_ones = count_ones;
+        min_age = age;
+        index_page = i;
+      }
+    }
+  }
+  if(min_ones == -1)
+    panic("page replacment algorithem failed");
+  return index_page;
+}
+uint64 insert_to_queue(int inserted_page){
+  struct proc * process = myproc();
+  struct age_queue * q = &process->queue;
+  //if(inserted_page >= 3){
+    if (q->last == 31)
+      q->last = -1;
+    q->last = q->last + 1;
+    q->pages[q->last] =inserted_page;
+    q->page_counter =  q->page_counter + 1;
+ // }
+  return 0;
+}
+
+void remove_from_queue(struct age_queue * q){
+  q->front = q->front+1;
+   if(q->front == 32) {
+      q->front = 0;
+   }
+   q->page_counter = q->page_counter-1;
+   
+}
+void
+remove_from_queue_not_in_memory(int page_num_removed){
+  struct proc * p = myproc();
+  struct age_queue * q = &(p->queue);
+  int cur_page;
+  int page_count = q->page_counter;
+  for(int i = 0; i<page_count; i++){
+    cur_page = q->pages[q->front];
+     remove_from_queue(q);
+    if (!(page_num_removed == cur_page)){
+     insert_to_queue(cur_page);
+    }
+  }
+}
+
+int second_fifo(){
+  struct proc * p = myproc();
+  struct age_queue * q = &(p->queue);
+  int current_page;
+  int page_counter = q->page_counter;
+  for (int i = 0; i<page_counter; i++){
+    current_page = q->pages[q->front];
+    pte_t * pte = walk(p->pagetable, current_page*PGSIZE,0);
+    uint pte_flags = PTE_FLAGS(*pte);
+    if(!(pte_flags & PTE_A)){
+      printf("not accsesed %d \n", current_page);
+      remove_from_queue(q);
+      return current_page; //the file will no longer be in the memory and will be removed next time
+    }
+    else{ //the page has been accsesed
+      *pte = *pte & (~PTE_A); //make A bit off
+      printf("removing accsesed bit from %d\n", current_page);
+      remove_from_queue(q);
+      insert_to_queue(current_page);
+    }
+  }
+  current_page = q->pages[q->front];
+  remove_from_queue(q);
+  return current_page;
+}
+
+int find_file_to_remove(){
+  #if SELECTION==NFUA
+    return minimum_counter_NFUA();
+  #endif
+  #if SELECTION == LAPA
+    return minimum_ones();
+  #endif
+  #if SELECTION==SCFIFO
+    return second_fifo(); 
+  #endif
+  return 0;
+}
+
+void shift_counter(){
+ struct proc * p = myproc();
+ pte_t * pte;
+ for(int i=0; i<32; i++){
+      uint page_virtual_address = i*PGSIZE;
+      pte = walk(myproc()->pagetable, page_virtual_address, 0);
+      if(*pte & PTE_V){
+        p->paging_meta_data[i].aging = p->paging_meta_data[i].aging>>1;
+        if(*pte & PTE_A){
+          p->paging_meta_data[i].aging = p->paging_meta_data[i].aging | SHIFT_ON;
+          *pte = *pte & (~PTE_A); //turn off
+        }
+      }
+    }
+}
+
+//update aging algorithm when the process returns to the scheduler
+void
+update_aging_algorithms(void){
+  #if SELECTION == NFUA
+      shift_counter();
+  #endif
+  #if SELECTION == LAPA
+      shift_counter();
+  #endif
+  #if SELECTION==SCFIFO
+  return;
+  #endif
+return;
+}
+
+uint init_aging(int fifo_init_pages){
+  #if SELECTION == NFUA
+    return 0;
+  #endif
+  #if SELECTION == LAPA
+    return LAPA_AGE;
+  #endif
+  #if SELECTION==SCFIFO
+    return insert_to_queue(fifo_init_pages);
+  #endif 
+  return 0;
+}
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..0e737d8
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,38 @@
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+void 
+testall(){
+  int i = 0;
+  uint64 c = 17;
+  uint64 pointers[c];
+  printf("IN PARENT\n");
+  for (i = 0 ; i < c ; i++){
+        pointers[i] = (uint64)sbrk(4096);
+        * (char *) pointers[i] = (char) ('a' + i);
+        printf("%c\n",  * (char *) pointers[i]);
+  }
+
+  int pid;
+  if( (pid = fork()) ==0){
+      printf("IN CHILD \n");
+      for (i = 0 ; i < c ; i++){
+        printf("letter %c\n", *(char * )pointers[i]);
+      }
+      exit(0);
+  }
+  else{
+    int status;
+    wait(&status); 
+  }
+}
+
+int
+main(void)
+{
+  printf( "--------- test  ---------\n");
+  testall();
+  exit(0);
+  return 0; 
+}
\ No newline at end of file
diff --git a/user/usertests.c b/user/usertests.c
index ba4255b..a5459f7 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -1772,7 +1772,7 @@ manywrites(char *s)
       printf("fork failed\n");
       exit(1);
     }
-
+    
     if(pid == 0){
       char name[3];
       name[0] = 'b';
